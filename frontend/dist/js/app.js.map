{"version":3,"sources":["../deps/node_modules/browser-pack/_prelude.js","src/client.js","src/components/ActiveNotebook.js","src/components/DevTools.js","src/components/Home.js","src/components/MarkdownEditor.js","src/components/Note.js","src/components/NoteEdit.js","src/components/NoteView.js","src/components/NotebookEdit.js","src/components/NotebookList.js","src/components/NotebookView.js","src/components/Root.js","src/components/StatsList.js","src/components/StatsView.js","src/helpers/ajax.js","src/helpers/api.js","src/helpers/createActionDispatchers.js","src/helpers/createStore.js","src/reducers/index.js","src/reducers/notebooks.js","src/reducers/notes.js","src/reducers/stats.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n * This is the entry point for the JavaScript application which runs in the\n * web browser. We call `window.main` when the page loads, and use that\n * opportunity to create the Redux store and mount the root React component.\n */\n\nconst React = require('react');\nconst ReactDOM = require('react-dom');\n\nconst createStore = require('./helpers/createStore');\nconst Root = React.createFactory(require('./components/Root'));\n\n// Initialisation function which we will call on page load\nwindow.main = (initialState) => {\n  // Create root React component with Redux store\n  const store = createStore(initialState);\n  const rootComponent = Root({ store });\n\n  // Mount React root component in DOM\n  const mountPoint = document.getElementById('root');\n  ReactDOM.render(rootComponent, mountPoint);\n};\n","const React = require('react');\nconst ReactRedux = require('react-redux');\n\nconst Note = require('./Note');\n\nclass ActiveNotebook extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n\n  // Function which creates a note component from a Note ID\n   const createNoteComponent = (currentNote) => {\n    return (\n      <Note\n        key={currentNote.id}\n        note={currentNote}\n        saveNote={this.props.saveNote}\n\t\t    createNote={this.props.createNote}\n        deleteNote={this.props.deleteNote}\n      />\n    );\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"notes-main\">\n        {this.props.nbnotes.map(createNoteComponent)}\n      </div>\n    </div>\n  );\n  }\n}\nmodule.exports = ActiveNotebook;","const React = require('react');\nconst ReduxDevtools = require('redux-devtools');\nconst DockMonitor = require('redux-devtools-dock-monitor').default;\nconst LogMonitor = require('redux-devtools-log-monitor').default;\n\nconst InternalDevTools = ReduxDevtools.createDevTools(\n  <DockMonitor toggleVisibilityKey=\"h\" changePositionKey=\"q\" defaultIsVisible={false}>\n    <LogMonitor />\n  </DockMonitor>\n);\n\nclass DevTools extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isMounted: false };\n  }\n\n  static instrument(...args) {\n    return InternalDevTools.instrument(...args);\n  }\n\n  componentDidMount() {\n    this.setState({ isMounted: true });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.isMounted && <InternalDevTools />}\n      </div>\n    );\n  }\n}\n\n/**\n * Redux development tools (useful for debugging).\n */\nmodule.exports = DevTools;\n","/**\n * This file contains the Home component.\n * Other React components for viewing notes and notebooks should be nested\n * beneath the Home component.\n */\n\nconst React = require('react');\nconst ReactRedux = require('react-redux');\nconst createActionDispatchers = require('../helpers/createActionDispatchers');\nconst NotebookList = require('./NotebookList');\nconst StatsList = require('./StatsList');\nconst notebooksActionCreators = require('../reducers/notebooks');\nconst notesActionCreators = require('../reducers/notes');\nconst statsActionCreators = require('../reducers/stats');\n\nclass Home extends React.Component {\n\n  render() {\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t{/* The heading area of the page */}\n\t\t\t<div className=\"neverwrote-header\">\n\t\t\t<h1 className=\"neverwrote-title\">Neverwrote - Virtual Notes</h1>\n\t\t\t</div>\n        <NotebookList \n          notebooks={this.props.notebooks} \n          loadNotes={this.props.loadNotes} \n          notes={this.props.notes} \n          \n          createNotebook={this.props.createNotebook}\n          saveNotebook={this.props.saveNotebook}\n          deleteNotebook={this.props.deleteNotebook}\n\n          createNote={this.props.createNote}\n          saveNote={this.props.saveNote}\n          deleteNote={this.props.deleteNote}/>\n\n\t\t\t\t<StatsList stats={this.props.stats} loadStats={this.props.loadStats}/>\n\t\t\t</div>\n      );\n    }\n  }\n  \nconst HomeContainer = ReactRedux.connect(\n  (state) => ({\n    stats: state.stats,\n\t  notebooks: state.notebooks,\n    notes: state.notes\n  }),\n  createActionDispatchers(statsActionCreators, notebooksActionCreators, notesActionCreators)\n)(Home);\nmodule.exports = HomeContainer;\n","const React = require('react');\n\n/**\n * A markdown editor. Markdown is a very simple language for formatting\n * text that can be converted into HTML.\n */\nclass MarkdownEditor extends React.Component {\n  componentDidMount() {\n    // SimpleMDE must be required here since it's browser-only.\n    const SimpleMDE = require('simplemde');\n\n    // Turn our plain old text area into a beautiful markdown editor\n    this.simpleMDE = new SimpleMDE({\n      indentWithTabs: false,\n      status: false,\n      autoDownloadFontAwesome: false,\n      element: this.textarea\n    });\n\n    // Put initial text in the editor\n    this.simpleMDE.value(this.props.value);\n\n    // Listen for changes and fire a callback\n    this.simpleMDE.codemirror.on('change', () => {\n      const newText = this.simpleMDE.value();\n      if(newText !== this.props.value) {\n        this.props.onChange({ target: { value: newText } });\n      }\n    });\n  }\n\n  componentDidUpdate() {\n    // Replace the text in the editor, preserving the cursor position and\n    // selection info\n    const selections = this.simpleMDE.codemirror.listSelections();\n    this.simpleMDE.value(this.props.value);\n    this.simpleMDE.codemirror.setSelections(selections);\n  }\n\n  // Describe how to render the component\n  render() {\n    const ref = (element) => { this.textarea = element; };\n    return (\n      <textarea ref={ref} />\n    );\n  }\n}\n\n// Export the component so that it can be required\nmodule.exports = MarkdownEditor;\n","const React = require('react');\r\n\r\nconst NoteEdit = require('./NoteEdit');\r\nconst NoteView = require('./NoteView');\r\n\r\nclass Note extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Set initial internal state for this component\r\n    this.state = { editing: false };\r\n  }\r\n\r\n  render() {\r\n    const openEdit = () => {\r\n      this.setState({ editing: true });\r\n    };\r\n\r\n    const openNew = () => {\r\n      this.setState({ create: true });\r\n    };\r\n\t\r\n    const closeEdit = () => {\r\n      this.setState({ editing: false });\r\n    };\r\n\r\n    const closeNew = () => {\r\n      this.setState({ create: false });\r\n    };\r\n\r\n    const saveEdit = (editedNote) => {\r\n      this.props.saveNote(editedNote, (err) => {\r\n        if(!err) closeEdit();\r\n      });\r\n    };\r\n\t\r\n\tconst createNote = (newNote) => {\r\n      this.props.createNote(newNote, (err) => {\r\n        if(!err) closeEdit();\r\n      });\r\n    };\r\n\r\n    const deleteThisNote = () => {\r\n      this.props.deleteNote(this.props.note.id);\r\n    };\r\n\r\n    if(this.state.editing) {\r\n      return (\r\n        <NoteEdit\r\n          note={this.props.note}\r\n\t\t      onSave={saveEdit}\r\n          onCancel={closeEdit}\r\n        />\r\n      );\r\n    }\r\n\tif(this.state.create) {\r\n\t\treturn (\r\n\t\t\t<NoteEdit\r\n        note={{}}\r\n\t\t\t  onSave={createNote}\r\n\t\t\t  onCancel={closeNew}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n  return (\r\n      <NoteView\r\n        note={this.props.note}\r\n        onDelete={deleteThisNote}\r\n        onEdit={openEdit}\r\n        onCreate={openNew}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\n// Export the Note component\r\nmodule.exports = Note;\r\n","const React = require('react');\nconst _ = require('lodash');\n\nconst MarkdownEditor = require('./MarkdownEditor');\n\nclass NoteEdit extends React.Component {\n  constructor(props) {\n    super(props);\n    const note = props.note || {};\n\n    this.state = {\n      title: note.title || '',\n      content: note.content || ''\n    };\n  }\n\n  render() {\n    const revertAndStopEditing = (event) => {\n      event.preventDefault();\n      this.props.onCancel();\n    };\n\n    const submitAndStopEditing = (event) => {\n      event.preventDefault();\n      // Creates a new note object and saves it.\n      const editedNote = _.assign({}, this.props.note, {\n        title: this.state.title,\n        content: this.state.content\n      });\n      this.props.onSave(editedNote);\n    };\n\n     const onChangeContent = (event) => {\n      this.setState({ content: event.target.value });\n    };\n\t\n    const onTitleChange = (event) => {\n      this.setState({ title: event.target.value });\n    };\n\t\n    return (\n      <form className=\"neverwrote-note\">\n\t\t{/* Title field */}\n        <div className=\"form-group\">\n          <input className=\"form-control input-lg\" value={this.state.title}\n            placeholder=\"Note title\" onChange={onTitleChange}\n          />\n        </div>\n\t\t\n        <div className=\"form-group\">\n        <MarkdownEditor\n          value={this.props.note.content} onChange={onChangeContent} />\n        </div>\n\n        {/* Save button */}\n        <button className=\"btn btn-default pull-right\"\n          onClick={submitAndStopEditing}\n        >\n          Save\n        </button>\n        {/* Cancel button */}\n        <button className=\"btn btn-default pull-right\"\n          style={{ marginRight: '12px' }}\n          onClick={revertAndStopEditing}\n        >\n          Cancel\n        </button>\n      </form>\n    );\n  }\n}\n\nmodule.exports = NoteEdit;\n","const React = require('react');\r\n\r\n/**\r\n * Render edit/delete buttons and note timestamp.\r\n *\r\n * List of props: note, time, onEdit, onDelete\r\n */\r\nconst NoteMeta = (props) => {\r\n  return (\r\n    <div className=\"neverwrote-note-meta\">\r\n\t    <a role=\"button\" title=\"Create note\"\r\n        style={{ paddingRight: '8px' }}\r\n        onClick={ props.onCreate }\r\n      >\r\n        <span className=\"fa fa-plus-square\" />\r\n      </a>\r\n\t  \r\n      <a role=\"button\" title=\"Edit note\"\r\n        style={{ paddingRight: '8px' }}\r\n        onClick={ props.onEdit }\r\n      >\r\n        <span className=\"fa fa-edit\" />\r\n      </a>\r\n\r\n      <a role=\"button\" title=\"Delete note\"\r\n         style={{ paddingRight: '8px' }}\r\n         onClick={ props.onDelete }\r\n      >\r\n        <span className=\"fa fa-remove\" />\r\n      </a>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * A read-only view of a blog note.\r\n * This is a stateless functional component.\r\n * It takes props as its args and returns what the render method would return.\r\n */\r\nconst NoteView = (props) => {\r\n  return (\r\n    <div className=\"neverwrote-note\">\r\n      <h2 className=\"neverwrote-note-title\">{props.note.title}</h2>\r\n\r\n      <NoteMeta {...props} />\r\n\r\n      <div className=\"neverwrote-note-content\">{props.note.content}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nmodule.exports = NoteView;\r\n","const React = require('react');\nconst _ = require('lodash');\n\n/**\n * A form for editing a blog Note.\n */\nclass NotebookEdit extends React.Component {\n  constructor(props) {\n    super(props);\n    const notebook = props.notebook || {};\n\n    this.state = {\n      title: notebook.title || '',\n    };\n  }\n\n  render() {\n    const revertAndStopEditing = (event) => {\n      event.preventDefault();\n      this.props.onCancel();\n    };\n\n    const submitAndStopEditing = (event) => {\n      event.preventDefault();\n      // Creates a new notebook object and saves it.\n      const editedNotebook = _.assign({}, this.props.notebook, {\n        title: this.state.title,\n      });\n      this.props.onSave(editedNotebook);\n    };\n\n    const onTitleChange = (event) => {\n      this.setState({ title: event.target.value });\n    };\n\n    return (\n      <form className=\"neverwrote-notebook\">\n        {/* Title field */}\n        <div className=\"form-group\">\n          <input className=\"form-control input-lg\" value={this.state.title}\n            placeholder=\"Notebook title\" onChange={onTitleChange}\n          />\n        </div>\n        {/* Save button */}\n        <button className=\"btn btn-default pull-right\"\n          onClick={submitAndStopEditing}\n        >\n          Save\n        </button>\n        {/* Cancel button */}\n        <button className=\"btn btn-default pull-right\"\n          style={{ marginRight: '12px' }}\n          onClick={revertAndStopEditing}\n        >\n          Cancel\n        </button>\n      </form>\n    );\n  }\n}\n\nmodule.exports = NotebookEdit;\n","const React = require('react');\n\n\nconst NotebookEdit = require('./NotebookEdit');\nconst NotebookView = require('./NotebookView');\nconst ActiveNotebook = require('./ActiveNotebook');\n\n/*\n  *** TODO: Build more functionality into the NotebookList component ***\n  At the moment, the NotebookList component simply renders the notebooks\n  as a plain list containing their titles. This code is just a starting point,\n  you will need to build upon it in order to complete the assignment.\n*/\nclass NotebookList extends React.Component {\n  \n  render() {\n\n    const createNotebookListItem = (nbdata) => {\n     \n\n      if(nbdata.id === this.props.notes.activeNotebookId) {\n        return <ActiveNotebook key={nbdata.id} \n                  notebook={nbdata} \n                  nbnotes={this.props.notes.data} \n                  saveNote={this.props.saveNote} \n                  deleteNote={this.props.deleteNote} \n                  createNote={this.props.createNote} \n                />;\n      }\n      \n      return <NotebookView \n                key={nbdata.id} \n                notebook={nbdata} \n                loadNotes={this.props.loadNotes} \n                createNotebook={this.props.createNotebook}\n                saveNotebook={this.props.saveNotebook}\n                deleteNotebook={this.props.deleteNotebook}\n              />;\n    }\n      return (\n        <div>\n          <h2>Notebooks</h2>\n          <ul>\n            {this.props.notebooks.data.map(createNotebookListItem)}\n          </ul>\n        </div>\n      );\n    }\n  }\nmodule.exports = NotebookList;\n","const React = require('react');\nconst ReactRedux = require('react-redux');\nconst NotebookEdit = require('./NotebookEdit');\n\nconst NotebookMenu = (props) => {\n\treturn (\n\t  <div className=\"neverwrote-notebook-menu\">\n\t\t  <a role=\"button\" title=\"Create notebook\"\n\t\t  style={{ paddingRight: '8px' }}\n\t\t  onClick={ props.onCreate }\n\t\t>\n\t\t  <span className=\"fa fa-plus-square\" />\n\t\t</a>\n\t\t\n\t\t<a role=\"button\" title=\"Edit notebook\"\n\t\t  style={{ paddingRight: '8px' }}\n\t\t  onClick={ props.onEdit }\n\t\t>\n\t\t  <span className=\"fa fa-edit\" />\n\t\t</a>\n  \n\t\t<a role=\"button\" title=\"Delete notebook\"\n\t\t   style={{ paddingRight: '8px' }}\n\t\t   onClick={ props.onDelete }\n\t\t>\n\t\t  <span className=\"fa fa-remove\" />\n\t\t</a>\n  \n\t  </div>\n\t);\n  };\n\nclass NotebookView extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t// Set initial internal state for this component\n\t\tthis.state = { editing: false, create: false};\n\t}\n\n\trender() {\n\t\tconst onClickNotebook = (event) => {\n\t\t\tevent.preventDefault();\n\t\t\tthis.props.loadNotes(this.props.notebook.id);\n\t\t};\n\t\tconst openNew = () => {\n\t\t\tthis.setState({ create: true });\n\t\t};\n\t\t\n\t\tconst closeNew = () => {\n\t\t\tthis.setState({ create: false });\n\t\t};\n\n\t\tconst openEdit = () => {\n\t\t\tthis.setState({ editing: true });\n\t\t};\n\t  \n\t\tconst closeEdit = () => {\n\t\t\tthis.setState({ editing: false });\n\t\t};\n\t  \n\t\tconst createNotebook = (newNotebook) => {\n\t\t\tthis.props.createNotebook(newNotebook, (err) => {\n\t\t\t\tif(!err) closeEdit();\n\t\t\t});\n\t\t};\n\t\t  \n\t\tconst deleteThisNotebook = () => {\n\t\t\tthis.props.deleteNotebook(this.props.notebook.id);\n\t\t}; \n\t  \n\t\tconst saveEdit = (editedNotebook) => {\n\t\t\tthis.props.saveNotebook(editedNotebook, (err) => {\n\t\t\t  if(!err) closeEdit();\n\t\t\t});\n\t\t};\n\t\t\n\t\tconst createNotebookEdit = () => {\n\t\t\tconsole.log('createBoteBooks edit');\n\t\t\tif(this.props.editing == true) {\n\t\t\t\treturn (<NotebookEdit\n\t\t\t\t\tnotebook={this.props.notebook}\n\t\t\t\t\tonSave={saveEdit}\n\t\t\t\t\tonCancel={closeEdit}\n\t\t\t\t/>)\n\t\t\t}\n\n\t\t\tif(this.props.create == true) {\n\t\t\t\treturn (<NotebookEdit\n\t\t\t\t\tnotebook={{}}\n\t\t\t\t\tonSave={saveEdit}\n\t\t\t\t\tonCancel={closeNew}\n\t\t\t\t\tonDelete={deleteThisNotebook}\n\t\t\t\t/>);\n\t\t\t}\n\t\t}\n\t\t\treturn (\n\t\t\t<li>\n\t\t\t\t<NotebookMenu\n\t\t\t\t\tonEdit={openEdit}\n\t\t\t\t\tonCreate={openNew}\n\t\t\t\t\tonDelete={deleteThisNotebook}\n\t\t\t\t\tonCancel={closeNew}\n\t\t\t\t\tonDelete={deleteThisNotebook}\n\t\t\t\t/>\n\t\t\t\t{createNotebookEdit}\n\t\t\t\t<a href=\"#\" onClick={onClickNotebook}>\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t{this.props.notebook.title}\n\t\t\t\t\t</a>\n\t\t\t</li>\t\n\t\t  );\n\t\t  \n\t}\n}\nmodule.exports = NotebookView;","/**\n * The root React component from which all other components on the page are\n * descended. It is this component which is directly mounted on the DOM.\n */\n\nconst React = require('react');\nconst ReactRedux = require('react-redux');\n\nconst Provider = ReactRedux.Provider;\nconst Home = require('./Home');\n\n// Enable development tools when in development mode\nlet DevTools = 'span';\nif(process.env.NODE_ENV === 'development') {\n  DevTools = require('./DevTools');\n}\n\n// Define the Root component\nconst Root = (props) => {\n  return (\n    /* The Provider gives descendants the ability to connect to the Redux store */\n    <Provider store={props.store}>\n      <div>\n        {/* The Home component contains the guts of the page */}\n        <Home />\n        {/* DevTools is just an empty element when not in development mode */}\n        <DevTools />\n      </div>\n    </Provider>\n  );\n};\n\nmodule.exports = Root;\n","const React = require('react');\nconst ReactRedux = require('react-redux');\n\nconst createActionDispatchers = require('../helpers/createActionDispatchers');\nconst statsActionCreators = require('../reducers/stats');\nconst StatsView = require('./StatsView');\n\n/*\n\n*/\nclass StatsList extends React.Component {\n  constructor(props) {\n    super(props);\n\t  this.props.loadStats();\n  }\n\n  render() {\n\n  const refreshStats = () => {\n    this.props.loadStats();\n  };\n\n\treturn (\n        <div>\n          <h2>Stats</h2>\n          <ul>\n\t\t  <StatsView\n              stats={this.props.stats.data}\n              onRefresh={refreshStats}\n            />\n          </ul>\n        </div>\n      );\n    }\n  }\n\nmodule.exports = StatsList;\n","const React = require('react');\r\n\r\n/**\r\n */\r\n\r\n/**\r\n */\r\nconst StatsView = (props) => {\r\n  return ( \r\n  <div className=\"neverwrote-stats\">\r\n      <a role=\"button\" title=\"Refresh\"\r\n        style={{ paddingRight: '8px' }}\r\n        onClick={ props.onRefresh }\r\n      >\r\n      <span className=\"fa fa-refresh\" />\r\n    </a>\r\n        <table>\r\n        <thead>\r\n        <tr>\r\n          <td>Statistic</td>\r\n          <td>Value</td>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>Note Counts</td>\r\n            <td>{props.stats.noteCount}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Notebook Counts</td>\r\n            <td>{props.stats.notebookCount}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Oldest Note</td>\r\n            <td>{props.stats.oldestNotebook}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Recently Updated Note</td>\r\n            <td>{props.stats.recentlyUpdatedNote}</td>\r\n          </tr>\r\n      </tbody>\r\n       </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nmodule.exports = StatsView;","/**\n * This helper file provides a set of functions for performing HTTP requests.\n * It will work on both the backend and the frontend.\n */\n\nconst ajax = {};\n\nif(process.env.IN_BROWSER) {\n  ajax.request = opts => new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.addEventListener('error', () => {\n      reject(new Error('Request failed'));\n    });\n    xhr.addEventListener('load', () => {\n      if(xhr.status !== 200) {\n        reject(new Error(`Received status ${xhr.status}`));\n      } else {\n        resolve(opts.json ? JSON.parse(xhr.responseText) : xhr.responseText);\n      }\n    });\n    xhr.open(opts.method, opts.url);\n    if(opts.json) {\n      xhr.setRequestHeader('Content-Type', 'application/json');\n      xhr.send(opts.data !== undefined ? JSON.stringify(opts.data) : opts.data);\n    } else {\n      xhr.send(opts.data);\n    }\n  });\n} else {\n  const request = require('request');\n\n  ajax.request = opts => new Promise((resolve, reject) => {\n    request({\n      url: opts.url,\n      method: opts.method,\n      body: opts.data,\n      json: opts.json\n    }, (error, response, body) => {\n      if(error) {\n        reject(error);\n      } else if(response.statusCode !== 200) {\n        reject(new Error(`Received status ${response.statusCode}`));\n      } else {\n        resolve(body);\n      }\n    });\n  });\n}\n\nmodule.exports = ajax;\n","/**\n * This helper file provides a set of functions for communicating with the\n * backend API. It will work on both the backend and the frontend.\n */\n\nconst ajax = require('./ajax');\n\nconst api = {};\n\nif(process.env.IN_BROWSER) {\n  api.baseUrl = '/api';\n} else {\n  api.baseUrl = 'http://api:3000';\n}\n\napi.get = function(path) {\n  return ajax.request({\n    method: 'GET',\n    url: this.baseUrl + path,\n    json: true\n  });\n};\n\napi.post = function(path, data) {\n  return ajax.request({\n    method: 'POST',\n    url: this.baseUrl + path,\n    json: true,\n    data\n  });\n};\n\napi.put = function(path, data) {\n  return ajax.request({\n    method: 'PUT',\n    url: this.baseUrl + path,\n    json: true,\n    data\n  });\n};\n\napi.delete = function(path) {\n  return ajax.request({\n    method: 'DELETE',\n    url: this.baseUrl + path,\n    json: true\n  });\n};\n\nmodule.exports = api;\n","/**\n * Returns a function that, when given a dispatch function, returns an\n * object containing a bunch of action dispatchers.\n */\nconst createActionDispatchers = (...actionCreatorGroups) => dispatch =>\n  // Iterate over actionCreatorsArray, which is an array of arrays of action\n  // creators\n  actionCreatorGroups.reduce((actionDispatchers, actionCreators) => {\n    // Add an action dispatcher for each action creator in actionCreators\n    Object.keys(actionCreators)\n      .filter((name) => (typeof actionCreators[name] === 'function'))      \n      .forEach((name) => {\n        actionDispatchers[name] = function(...actionCreatorArgs) {\n          return dispatch(actionCreators[name].apply(this, actionCreatorArgs));\n        };\n      });\n    return actionDispatchers;\n  }, {});\n\nmodule.exports = createActionDispatchers;\n","/**\n * This helper file provides a function for creating the Redux store. In\n * development mode it will also connect up the Redux development tools for\n * debugging purposes.\n */\n\nconst Redux = require('redux');\nconst reduxThunk = require('redux-thunk').default;\nconst combinedReducers = require('../reducers');\n\nlet finalCreateStore;\n\nif(process.env.NODE_ENV === 'production') {\n  finalCreateStore = Redux.compose(\n    // Enables middleware\n    Redux.applyMiddleware(reduxThunk)\n  )(Redux.createStore);\n} else {\n  const DevTools = require('../components/DevTools');\n\n  finalCreateStore = Redux.compose(\n    // Enables middleware\n    Redux.applyMiddleware(reduxThunk),\n    // Enables DevTools\n    DevTools.instrument()\n  )(Redux.createStore);\n}\n\nmodule.exports = initialState => finalCreateStore(combinedReducers, initialState);\n","/**\n * Specify all of your reducers in this file, so they can be combined into\n * one big reducer.\n */\n\nconst Redux = require('redux');\n\nmodule.exports = Redux.combineReducers({\n  notebooks: require('./notebooks'),\n  notes: require('./notes'),\n  stats: require('./stats'),\n});\n","const _ = require('lodash');\nconst api = require('../helpers/api');\n\n// Action type constants\nconst LOAD = 'neverwrote-frontend/notebooks/LOAD';\nconst UPDATE = 'neverwrote-frontend/notebooks/UPDATE';\nconst INSERT = 'neverwrote-frontend/notebooks/INSERT';\nconst CHANGE = 'neverwrote-frontend/notebooks/CHANGE';\nconst REMOVE = 'neverwrote-frontend/notebooks/REMOVE';\n\n// The initial state of  data\nconst initialState = {\n  notebooks: [\n\t{ id: 100, title: 'From Redux Store: A hard-coded notebook' },\n\t{ id: 101, title: 'From Redux Store: Another hard-coded notebook' },\n  ],\n  notes: [\n\t{ id: 1001, title: 'From Redux Store: A hard-coded note' },\n    { id: 1011, title: 'From Redux Store: Another hard-coded note' },\n  ],\n  activeNotebookId: -1,\n};\n\n// Function which takes the current data state and an action,\n// and returns a new state\nfunction reducer(state, action) {\n\t\n\tstate = state || initialState;\n\tconsole.log('Notebook reducer state: ' + JSON.stringify(state).replace(/<\\//g, \"<\\\\/\"));\n\taction = action || {};\n\tconsole.log('Actions called' + action.type);\n\tswitch(action.type) {\n\n\t\tcase INSERT: {\n\t\t\tconst unsortedNotebooks = _.concat(state.notebooks, action.notes);\n\t  \n\t\t\tconst visibleNotebooks = _.orderBy(unsortedNotebooks, 'createdAt','desc');\n\t  \n\t\t\t// Return updated state\n\t\t\treturn _.assign({}, state, { visibleNotebooks} );\n\t\t}\t \n\n\t\tcase LOAD: {\n\t\t\tconsole.log('Load called with notebooks: ' + action.nbdata);\n\t\t\treturn _.assign({}, state, { notebooks: action.nbdata  });\n\t   }\n\n\t   case CHANGE: {\n\t\tconst visibleNotebooks = _.clone(state.notebooks);\n\t\tconst changedIndex = _.findIndex(state.visibleNotebooks, {id: action.notebook.id })\n\t\tvisibleNotes[changedIndex] = action.notebook;\n\t\treturn _.assign({}, state, { visibleNotes });\n\t  }\n  \n\t  // Removes a single notes from the visible notes list\n\t  case REMOVE: {\n\t\tconst visibleNotebooks = _.reject(state.notebooks, {id: action.id});\n\t\treturn _.assign({}, state, { visibleNotebooks });\n\t  }\n\n\t\tcase UPDATE:{\n\n\t\t\treturn _.assign({}, state, { activeNotebookId: action.data });\n\t\t}\n\n\t\tdefault: return state;\n\t}\n}\n\n\nreducer.updateNotebooks = (data) => {\n\tconsole.log('Reduceer update called');\n\treturn { type: UPDATE, data };\n};\n\nreducer.loadNotebooks = () => {\n\treturn (dispatch) => {\n\tapi.get('/notebooks').then((nbdata) => {\n\t\t\tdispatch({ type: LOAD, nbdata})\n    }).catch((err) => {\n      console.log(err.stack);\n\t});\n\tconsole.log('exit loadnotebooks ' );\n  };\n};\n\n// Inserts notebook into the notebook list\nreducer.insertNotebook = (notebook) => {\n\treturn { type: INSERT, notebook };\n  };\n  \nreducer.deleteNotebook = (notebookId) => {\n\treturn (dispatch) => {\n\t  api.delete('/notebooks/' + notebookId).then(() => {\n\t\tdispatch(reducer.removeNotebook(notebookId));\n\t  }).catch((err) => {\n\t\tconsole.log(err.stack);\n\t\talert('Failed to delete notebook.');\n\t  });\n\t};\n  };\n  \n  // Attempts to update a notebook on the server and updates local notebook data if\n  // successful\n  reducer.saveNotebook = (editedNotebook, callback) => {\n\treturn (dispatch) => {\n\t  api.put('/notebooks/' + editedNotebook.id, editedNotebook).then((notebook) => {\n\t\t// Saves local notebook.\n\t\tdispatch(reducer.changeNotebook(notebook));\n\t\tcallback();\n\t  }).catch((err) => {\n\t\tconsole.log(err.stack);\n\t\talert('Failed to save notebook.  Are all of the fields filled in correctly?');\n\t  });\n\t};\n  };\n  \n  // Attempts to create a notebook on the server and inserts it into the local notebook\n  // list if successful\n  reducer.createNotebook = (newNotebook) => {\n\treturn (dispatch) => {\n\t  api.post('/notebooks', newNotebook).then((notebook) => {\n\t\t// This notebook is one that the store returns us! It has notebook id incremented to the next available id\n\t\tdispatch(reducer.insertNotebook([notebook]));\n\t\tcallback();\n\t  }).catch((err) => {\n\t\tconsole.log(err.stack);\n\t\talert('Failed to create notebook. Are all of the fields filled in correctly?');\n\t  });\n\t};\n  };\n  \n  // Changes local notebook data\n  reducer.changeNotebook = (notebook) => {\n\treturn { type: CHANGE, notebook };\n  };\n\n// Removes a note from the visible notebook list\nreducer.removeNotebook = (id) => {\n\treturn { type: REMOVE, id };\n  };\n\n// Export the action creators and reducer\nmodule.exports = reducer;\n","const _ = require('lodash');\nconst api = require('../helpers/api');\n\n\n// Action type constants\nconst LOADNOTES = 'neverwrote-frontend/notes/LOADNOTES';\nconst INSERT = 'neverwrote-frontend/notes/INSERT';\nconst CHANGE = 'neverwrote-frontend/notes/CHANGE';\nconst REMOVE = 'neverwrote-frontend/notes/REMOVE';\n\n// The initial state of note data\nconst initialState = {\n\tdata: [\n\t\t{ id: 1001, title: 'From Redux Store: A hard-coded note' },\n\t\t{ id: 1011, title: 'From Redux Store: Another hard-coded note' },\n\t  ],\n};\n\n// Function which takes the current data state and an action,\n// and returns a new state\nfunction reducer(state, action) {\n\t\n\tstate = state || initialState;\n\tconsole.log('Notes reducer state: ' + JSON.stringify(state).replace(/<\\//g, \"<\\\\/\"));\n\taction = action || {};\n\tconsole.log('Actions called' + action.type);\n\tswitch(action.type) {\n\n    // Inserts new notes into the local store\n    case INSERT: {\n\t\t// Add in the new notes\n\t\t// Notice that we do not need to increment the notes id. Since the notes that we\n\t\t// are putting in is one that is returned by the api server which already has\n\t\t// the id incremented.\n\t\tconst unsortedNotes = _.concat(state.notes, action.notes);\n  \n\t\tconst visibleNotes = _.orderBy(unsortedNotes, 'createdAt','desc');\n  \n\t\t// Return updated state\n\t\treturn _.assign({}, state, { visibleNotes} );\n\t  }\t \n\n\tcase LOADNOTES: {\n\t\treturn _.assign({}, state, {activeNotebookId: action.notebookId, data:  action.notes });\n\t   }\n\t\n   \tcase CHANGE: {\n\t\tconst visibleNotes = _.clone(state.notes);\n\t\tconst changedIndex = _.findIndex(state.visibleNotes, {id: action.note.id })\n\t\tvisibleNotes[changedIndex] = action.note;\n\t\treturn _.assign({}, state, { visibleNotes });\n\t  }\n  \n\t  // Removes a single notes from the visible notes list\n\t  case REMOVE: {\n\t\tconst visibleNotes = _.reject(state.notes, {id: action.id});\n\t\treturn _.assign({}, state, { visibleNotes });\n\t  }\n\t\tdefault: return state;\n\t}\n}\n\n// Inserts notes into the notes list\nreducer.insertNotes = (notes) => {\n\treturn { type: INSERT, notes };\n};\n  \n// Attempts to create a note on the server and inserts it into the local note\n// list if successful\nreducer.createNote = (newNote, callback) => {\n\treturn (dispatch) => {\n\t  api.post('/notes', newNote).then((note) => {\n\t\t// This note is one that the store returns us! It has note id incremented to the next available id\n\t\tdispatch(reducer.insertNotes([note]));\n\t\tcallback();\n\t  }).catch((err) => {\n\t\tconsole.log(err.stack);\n\t\talert('Failed to create note. Are all of the fields filled in correctly?');\n\t  });\n\t};\n  };\n  \n  \nreducer.loadNotes = (notebookId) =>{\n\treturn (dispatch) => {\n\t\tapi.get('/notebooks/' + notebookId + '/notes').then((notes) => {\n\t\t\tdispatch({ type: LOADNOTES, notebookId, notes });\n    }).catch((err) => {\n      console.log(err.stack);\n\t});\n\tconsole.log('exit load notes ' );\n  };\n};\n\n// Now we define a whole bunch of action creators\n// Inserts notes into the note list\nreducer.insertNotes = (notes) => {\n\treturn { type: INSERT, notes };\n  };\n  \nreducer.deleteNote = (noteId) => {\n\treturn (dispatch) => {\n\t  api.delete('/notes/' + noteId).then(() => {\n\t\tdispatch(reducer.removeNote(noteId));\n\t  }).catch(() => {\n\t\talert('Failed to delete note.');\n\t  });\n\t};\n  };\n  \n  // Attempts to update a note on the server and updates local note data if\n  // successful\n  reducer.saveNote = (editedNote, callback) => {\n\treturn (dispatch) => {\n\t  api.put('/notes/' + editedNote.id, editedNote).then((note) => {\n\t\t// Saves local note.\n\t\tdispatch(reducer.changeNote(note));\n\t\tcallback();\n\t  }).catch(() => {\n\t\talert('Failed to save note.  Are all of the fields filled in correctly?');\n\t  });\n\t};\n  };\n  \n  // Attempts to create a note on the server and inserts it into the local note\n  // list if successful\n  reducer.createNote = (newNote, callback) => {\n\treturn (dispatch) => {\n\t  api.post('/notes', newNote).then((note) => {\n\t\t// This note is one that the store returns us! It has note id incremented to the next available id\n\t\tdispatch(reducer.insertNotes([note]));\n\t\tcallback();\n\t  }).catch(() => {\n\t\talert('Failed to create note. Are all of the fields filled in correctly?');\n\t  });\n\t};\n  };\n  \n  // Changes local note data\n  reducer.changeNote = (note) => {\n\treturn { type: CHANGE, note };\n  };\n\n// Removes a note from the visible note list\nreducer.removeNote = (id) => {\n\treturn { type: REMOVE, id };\n  };\n\n// Attempts to load more notes from the server and inserts them into the local\n// note list if successful\nreducer.loadMoreNotes = (callback) => {\n\treturn (dispatch, getState) => {\n\t  const state = _.assign({}, initialState, getState().notes);\n  \n\t  let path = '/notes';\n\n\t  api.get('/notes').then((newNotes) => {\n\t\tdispatch(reducer.insertNotes(newNotes));\n\t\tcallback();\n\t  }).catch(() => {\n\t\talert('Failed to load more notes');\n\t\tcallback('Failed to load more notes');\n\t  });\n  \n\t};\n  };\n\n// Export the action creators and reducer\nmodule.exports = reducer;\n","const _ = require('lodash');\nconst api = require('../helpers/api');\n\n\n// Action type constants\nconst LOADSTATS = 'neverwrote-frontend/stats/LOADSTATS';\n\n// The initial state of stats data\nconst initialState = {\n\tdata: [\n\t\t{\"noteCount\": 18,\n\t\t\"notebookCount\": 5,\n\t\t\"oldestNotebook\": \"Housework\",\n\t\t\"oldestNotebookDate\": \"2020-11-01T00:10:48.000Z\",\n\t\t\"recentlyUpdatedNote\": \"Shave the catfghfghfghfgh\",\n\t\t\"recentlyUpdatedNoteDate\": \"2020-11-04T12:36:51.000Z\"}\n\t],\n};\n\n// Function which takes the current data state and an action,\n// and returns a new state\nfunction reducer(state, action) {\n\t\n\tstate = state || initialState;\n\tconsole.log('Stats reducer state: ' + JSON.stringify(state).replace(/<\\//g, \"<\\\\/\"));\n\taction = action || {};\n\tconsole.log('Actions called' + action.type);\n\tswitch(action.type) {\n\n\t\tcase LOADSTATS: {\n\t\t\treturn _.assign({}, state, {data:  action.stats });\n\t\t}\n\t\t\tdefault: return state;\n\t\t}\n}\n  \nreducer.loadStats = () => {\n\treturn (dispatch) => {\n\t\tapi.get('/stats/').then((stats) => {\n\t\t\tdispatch({ type: LOADSTATS, stats });\t\t\n    }).catch((err) => {\n      console.log(err.stack);\n\t});\n  };\n};\n\n// Export the action creators and reducer\nmodule.exports = reducer;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}